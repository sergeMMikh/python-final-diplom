"""
Django settings for commercial_net_service project.

Generated by 'django-admin startproject' using Django 2.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
# from decouple import config

from pathlib import Path

from dotenv import load_dotenv
import platform

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
# SECRET_KEY = "wfv4wv+n19$qk5=65=#m)=5wm#7ox^ouicfj@g2(a3mf)z$h*0"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')
# DEBUG = True
CSRF_TRUSTED_ORIGINS = ["https://web-production-cde8.up.railway.app"]

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')
# ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # 'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.vk',
    # 'allauth.socialaccount.providers.yandex',
    # 'allauth.socialaccount.providers.github',

    'rest_framework',
    'rest_framework.authtoken',
    'django_rest_passwordreset',

    'django_celery_beat',
    'django_celery_results',

    'orders',
]

# linked after all apps
INSTALLED_APPS += [
    'drf_spectacular',
]

SITE_ID = 1
SOCIALACCOUNT_LOGIN_ON_GET = True

SOCIALACCOUNT_PROVIDERS = {
    # 'google': {
    #     'SCOPE': [
    #         'profile',
    #         'email',
    #     ],
    #     'AUTH_PARAMS': {
    #         'access_type': 'online'
    #     },
    # },
    #
    # 'github': {
    #     # 'GITHUB_URL': 'https://github.com/sergeMMikh',
    #     'SCOPE': [
    #         'user',
    #         'repo',
    #         'road:org'
    #     ],
    # }
    'vk': {
        'APP': {
            'client_id': os.getenv('VK_ID'),
            'secret': os.getenv('VK_SECRET'),
            'key': os.getenv('VK_KEY'),
        },
        "SCOPE": ["email"],
        "FIELDS": ['id', 'email', 'first_name', 'last_name']
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'commercial_net_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'commercial_net_service.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),
        'NAME': os.getenv('DB_NAME'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'TEST': {
            'MIRROR': 'default',
        },
    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': """django.contrib.auth.password_validation.UserAttributeSimilarityValidator""",
    },
    {
        'NAME': """django.contrib.auth.password_validation.MinimumLengthValidator""",
    },
    {
        'NAME': """django.contrib.auth.password_validation.CommonPasswordValidator""",
    },
    {
        'NAME': """django.contrib.auth.password_validation.NumericPasswordValidator""",
    },
]

AUTH_USER_MODEL = 'orders.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.ScopedRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '50/day',  # limits the rate of unauthorised users = limit registrations per day from one source
        'orders': '100/day',  # limits the byers' rates
        'price-list': '200/day',  # limits shops' rates
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,
    # 'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

}

# This configures Redis as the datastore between Django + Celery
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_REDIS_URL', 'redis://localhost:6379')

# save Celery task results in Django's database
CELERY_RESULT_BACKEND = "django-db"

# this allows you to schedule items in the Django admin.
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'
# CELERY_BEAT_SCHEDULE = {}

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Lisbon'

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# Email
# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-SERVER_EMAIL

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EM_HOST')
EMAIL_HOST_USER = os.getenv('EM_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EM_HOST_PASSWORD')
EMAIL_PORT = os.getenv('EM_PORT')
EMAIL_USE_TLS = os.getenv('EM_USE_TLS')

STATIC_URL = '/static/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

SPECTACULAR_SETTINGS = {
    'TITLE': 'Commercial net service API',
    'DESCRIPTION': 'Commercial net service.',
    'VERSION': '1.0.0',
    # 'SERVE_PERMISSIONS': [
    #   'rest_framework.permissions.IsAuthenticated',
    # ],
    # 'SERVE_AUTHENTICATION': [
    #     'rest_framework.authentication.BasicAuthentication',
    # ],
    # 'SWAGGER_UI_SETTINGS': {
    #     'DeepLinking': True,
    #     'DisplayOperationId': True
    # },
    # 'COMPONENT_SPLIT_REQUEST': True,
    # 'SORT_OPERATIONS': False,
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}
